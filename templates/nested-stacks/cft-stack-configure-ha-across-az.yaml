Outputs:
  LambdaConfigureHAAcrossAZRole:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-LambdaConfigureHAAcrossAZRole'
    Value: !Sub 'https://console.aws.amazon.com/iam/home#/roles/${LambdaConfigureHAAcrossAZRole}'
Parameters:
  ADCCustomPassword:
    Type: String
    AllowedPattern: '[.\S]{8,15}'
    ConstraintDescription: Password length must be minimum 8 and maximum 15 characters.
      Whitespace characters not allowed.
    Description: Strong password recommended. Password length must be minimum 8 and
      maximum 15 characters. Whitespace characters not allowed.
    NoEcho: true
  RPCNodePassword:
    Type: String
    Default: ""
    Description:
      Leave it empty if you want to keep the RPCNodePassword same as the
      ADCCustomPassword. For more details on RPC Node passoword, refer
      https://docs.netscaler.com/en-us/citrix-adc/current-release/getting-started-with-citrix-adc/change-rpc-node-password.html
    NoEcho: true
  PrimaryInstanceID:
    Type: String
    Description: ''
  PrimaryManagementPrivateIP:
    Type: String
    Default: ''
    Description: ''
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  PrimaryClientPrivateIP:
    Type: String
    Default: ''
    Description: ''
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  PrimaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  PrimaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  ManagementSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
    Description: ''
  SecondaryInstanceID:
    Type: String
    Description: ''
  SecondaryManagementPrivateIP:
    Type: String
    Default: ''
    Description: ''
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  SecondaryClientPrivateIP:
    Type: String
    Default: ''
    Description: ''
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  SecondaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  S3BucketName:
    Type: String
    Description: ''
    AllowedPattern: ()|^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$
  S3Key:
    Type: String
    Description: ''
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  LambdaConfigureHAAcrossAZRole:
    Properties:
      Description: ''
      Path: /
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: citrixadc-lambda-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeSubnets
                  - ec2:DescribeVpcs
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeInstanceStatus
                  - ec2:CreateNetworkInterface
                  - ec2:DeleteNetworkInterface
                  - ec2:AttachNetworkInterface
                  - ec2:DetachNetworkInterface
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:ResetNetworkInterfaceAttribute
                  - ec2:AssignPrivateIpAddresses
                  - ec2:UnassignPrivateIpAddresses
                  - ec2:AllocateAddress
                  - ec2:ReleaseAddress
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
    Type: AWS::IAM::Role
  ConfigureHAFunction:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ConfigureHAFunction'
      Code:
        S3Bucket: !Ref 'S3BucketName'
        S3Key: !Ref 'S3Key'
      Description: ConfigureHAFunction
      Handler: lambda_ha_across_az.lambda_handler
      Role: !GetAtt 'LambdaConfigureHAAcrossAZRole.Arn'
      Runtime: python3.9
      Timeout: 900
      VpcConfig:
        SecurityGroupIds:
          - !Ref 'ManagementSecurityGroupID'
        SubnetIds:
          - !Ref 'PrimaryManagementPrivateSubnetID'
          - !Ref 'SecondaryManagementPrivateSubnetID'
    Type: AWS::Lambda::Function
  ConfigureLambda:
    Properties:
      ServiceToken: !GetAtt 'ConfigureHAFunction.Arn'
      CustomADCPassword: !Ref 'ADCCustomPassword'
      RPCNodePassword: !Ref RPCNodePassword
      PrimaryADCInstanceID: !Ref 'PrimaryInstanceID'
      PrimaryADCPrivateNSIP: !Ref 'PrimaryManagementPrivateIP'
      PrimaryADCPrivateVIP: !Ref 'PrimaryClientPrivateIP'
      PrimaryADCVIPPublicSubnetID: !Ref 'PrimaryClientPublicSubnetID'
      SecondaryADCInstanceID: !Ref 'SecondaryInstanceID'
      SecondaryADCPrivateNSIP: !Ref 'SecondaryManagementPrivateIP'
      SecondaryADCPrivateVIP: !Ref 'SecondaryClientPrivateIP'
    Type: AWS::CloudFormation::CustomResource
