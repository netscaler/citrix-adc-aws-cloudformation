Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ""
  VPCTenancy:
    Type: String
    Description: ""
    Default: default
    AllowedValues:
      - default
      - dedicated
  AdcPassword:
    AllowedPattern: '[.\S]{1,}'
    ConstraintDescription:
      Password length must be minimum 1 character. Whitespace
      characters not allowed.
    Description: Strong password recommended
    NoEcho: true
    Type: String
  AdcNSIP:
    Type: String
    Default: ""
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  ClientID:
    Description: "If do do not already have, Refer here: https://developer.cloud.com/citrix-cloud/citrix-cloud-api-overview/docs/get-started-with-citrix-cloud-apis"
    NoEcho: true
    Type: String
  ClientSecret:
    Description: "If do do not already have, Refer here: https://developer.cloud.com/citrix-cloud/citrix-cloud-api-overview/docs/get-started-with-citrix-cloud-apis"
    NoEcho: true
    Type: String
  CustomerID:
    Description: "If do do not already have, Refer here: https://developer.cloud.com/citrix-cloud/citrix-cloud-api-overview/docs/get-started-with-citrix-cloud-apis"
    NoEcho: true
    Type: String
  ADMAgentDeployment:
    Description: If you select 'No', only give 'Citrix ADM Agent IP' below and ignore the rest of the parametes in this section.
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  ADMAgentIP:
    Default: ""
    Description: Ignore this if you are deploying ADM Agent below. This IP will be auto assigned in the deployment process.
    Type: String
  S3BucketName:
    Type: String
    Description: Leave as it is, if unsure
    Default: citrixadc-automation
  VPCCIDR:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  ADMAgentManagementSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  ADMAgentInstanceType:
    Type: String
    Description: ""
    Default: m5.xlarge
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  ADMAgentRestrictedManagementCIDR:
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    Type: String
  ADMAgentKeyPairName:
    Description: ""
    Type: AWS::EC2::KeyPair::KeyName
  ADMAgentManagementENIEIP:
    Type: String
    Description: ""
    Default: "No"
    AllowedValues:
      - "No"
      - "Yes"

Conditions:
  DeployADMAgent: !Equals [!Ref ADMAgentDeployment, "Yes"]

Resources:
  RegisterADC:
    Properties:
      CustomerID: !Ref "CustomerID"
      ClientID: !Ref "ClientID"
      ClientSecret: !Ref "ClientSecret"
      ADCIP: !Ref "AdcNSIP"
      AgentIP:
        !If [
          DeployADMAgent,
          !GetAtt ADMAgentStack.Outputs.ManagementPrivateIP,
          !Ref ADMAgentIP,
        ]
      ADCPassword: !Ref AdcPassword
      ProfileName: !Ref AWS::StackName
      ServiceToken: !GetAtt "RegisterADCFunction.Arn"
    Type: AWS::CloudFormation::CustomResource
  RegisterADCFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-RegisterADCFunction"
      Description: RegisterADCFunction
      Handler: index.handler
      Role: !GetAtt "RegisterADCRole.Arn"
      Runtime: python3.8
      Timeout: 100
      Code:
        ZipFile: |
          import urllib.request, urllib.parse
          import json, random, string, time
          import cfnresponse
          HEADERS = {}
          def open_url(url, headers, data=None, method='GET'):
            if data: data = data.encode('utf-8')
            req = urllib.request.Request(url, data, headers, method)
            try:
              with urllib.request.urlopen(req) as f:
                return f.status, f.reason, json.loads(f.read())
            except Exception as e:
              return e.code, e.reason, json.loads(e.read())
          def get_token(client_id, client_secret):
            url = 'https://api-us.cloud.com/cctrustoauth2/root/tokens/clients'
            params = {'grant_type': 'client_credentials', 'client_id': client_id, 'client_secret': client_secret}
            params = urllib.parse.urlencode(params)
            return open_url(url, {}, params, 'POST')
          def get_all_agents(customer_id):
            print("INSIDE get_all_agents()")
            agent_url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/mps_agent'
            status, reason, body = open_url(agent_url, HEADERS)
            print(f"Status={status}; Reason={reason}; Body={json.dumps(body, indent=4)}")
            return body['mps_agent']
          def get_agent(ip, customer_id):
              print("INSIDE get_agent()")
              all_agents = get_all_agents(customer_id)
              for agent in all_agents:
                if agent['name'] == ip and agent['platform'] == 'AWS': return agent
              return None
          def create_new_profile(profilename, username, password, customer_id):
            print("INSIDE create_new_profile()")
            data = { "ns_device_profile": { "name": profilename, "username": username, "password": password, "snmpsecurityname": "test-snmp", } }
            url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/ns_device_profile'
            status, reason, body = open_url(url, HEADERS, json.dumps(data), 'POST')
            print(f"Status={status}; Reason={reason}; Body={json.dumps(body, indent=4)}")
            if status != 200: # 409 CONFLICT if profile already exists
              raise Exception(f"Status={status}; Reason={reason}; Body={body}")
          def add_managed_adc(adcip, agentip,adcpass, profilename, customer_id):
            print("INSIDE add_managed_adc()")
            MAX_RETRIES, tries = 30, 0
            agent = get_agent(agentip, customer_id)
            while agent is None and tries < MAX_RETRIES:
              agent = get_agent(agentip, customer_id)
              tries += 1
              print(f"Agent not found. Retrying in 10 seconds. Tries={tries}")
              time.sleep(10)
            dc_id = agent['datacenter_id']
            create_new_profile(profilename, 'nsroot', adcpass, customer_id)
            agent_id = agent['id']
            data =    {
              "params": { "action": "add_device" },
              "managed_device": {
                "register_failed_device": "true",
                "ip_address": adcip,
                "profile_name": profilename,
                "datacenter_id": dc_id,
                "agent_id": agent_id,
              }
            }
            url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/managed_device'
            status, reason, body = open_url(url, HEADERS, json.dumps(data), 'POST')
            print(f"Status={status}; Reason={reason}; Body={json.dumps(body, indent=4)}")
            if status != 200:
              raise Exception(f"Status={status}; Reason={reason}; Body={body}")
          def handler(event, context):
            global HEADERS
            lambda_status = cfnresponse.SUCCESS
            resp = {}
            try:
              if event["RequestType"] == "Create":
                print("Request = Create")
                customer_id = event["ResourceProperties"]["CustomerID"]
                client_id = event["ResourceProperties"]["ClientID"]
                client_secret = event["ResourceProperties"]["ClientSecret"]
                adcip = event["ResourceProperties"]["ADCIP"]
                agentip = event["ResourceProperties"]["AgentIP"]
                adcpass = event["ResourceProperties"]["ADCPassword"]
                profilename = event["ResourceProperties"]["ProfileName"]
                print(f"agentip:{agentip}; adcip:{adcip}; profilename:{profilename}")
                status, reason, body = get_token(client_id, client_secret)
                if status != 200:
                  print(f"Status={status}; Reason={reason}; Body={json.dumps(body, indent=4)}")
                  raise Exception(f"Status={status}; Reason={reason}; Body={body}")
                HEADERS = { 'Authorization': f"CwsAuthbearer={body['access_token']}", 'isCloud': 'true'}
                profilename += ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(3))
                add_managed_adc(adcip, agentip,adcpass, profilename, customer_id)
                resp = {"ADCProfileName": profilename}
            except Exception as e:
              print(f"Exception: {e}")
              lambda_status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, lambda_status, responseData=resp)
  RegisterADCRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
        Version: "2012-10-17"
      Description: ""
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies: []
    Type: AWS::IAM::Role

  ADMAgentStack:
    Condition: DeployADMAgent
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: !Sub "https://${S3BucketName}.s3.${AWS::URLSuffix}/templates/external-adm-agent/external-adm-agent.yaml"
      Tags:
        - Key: Name
          Value: !Sub "ADMAgentStack-${AWS::StackName}"
      Parameters:
        VPCID: !Ref "VPCID"
        VPCCIDR: !Ref "VPCCIDR"
        ManagementSubnetID: !Ref "ADMAgentManagementSubnetID"
        VPCTenancy: !Ref "VPCTenancy"
        ADMAgentInstanceType: !Ref "ADMAgentInstanceType"
        RestrictedManagementCIDR: !Ref "ADMAgentRestrictedManagementCIDR"
        KeyPairName: !Ref "ADMAgentKeyPairName"
        ManagementENIEIP: !Ref "ADMAgentManagementENIEIP"
        ClientID: !Ref "ClientID"
        ClientSecret: !Ref "ClientSecret"
        CustomerID: !Ref "CustomerID"
