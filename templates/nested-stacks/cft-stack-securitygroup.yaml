Outputs:
  GetVPCCIDRRole:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-GetVPCCIDRRole'
    Value: !Sub 'https://console.aws.amazon.com/iam/home#/roles/${GetVPCCIDRRole}'
  ManagementSG:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-ManagementSG'
    Value: !Ref 'ManagementSG'
  ClientSG:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-ClientSG'
    Value: !Ref 'ClientSG'
  ServerSG:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-ServerSG'
    Value: !Ref 'ServerSG'
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ''
  RestrictedWebAppCIDR:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  RestrictedSSHCIDR:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  CreateManagementSG:
    Type: String
    Description: "Condition to create the Management Security Group"
    Default: "true"
  CreateClientSG:
    Type: String
    Description: "Condition to create the Client Security Group"
    Default: "true"
  CreateServerSG:
    Type: String
    Description: "Condition to create the Server Security Group"
    Default: "true"


Conditions:
  CreateManagementSGCondition: !Equals [!Ref CreateManagementSG, "true"]
  CreateClientSGCondition: !Equals [!Ref CreateClientSG, "true"]
  CreateServerSGCondition: !Equals [!Ref CreateServerSG, "true"]

AWSTemplateFormatVersion: '2010-09-09'
Resources:
  GetVPCCIDRRole:
    Properties:
      Path: /
      Description: ''
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
      Policies:
        - PolicyName: get-vpccidr
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:DescribeVpcs
                Resource: '*'
                Effect: Allow
    Type: AWS::IAM::Role
  GetVPCCIDRFunction:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-GetVPCCIDRFunction'
      Code:
        ZipFile: |
          import json
          import cfnresponse
          import logging
          import boto3


          def handler(event, context):
              response_data = {}
              response_status = cfnresponse.FAILED
              logging.info("Received event: {}".format(json.dumps(event)))
              if event["RequestType"] == "Delete":
                  response_status = cfnresponse.SUCCESS
                  cfnresponse.send(event, context, response_status, response_data)
              else:
                  try:
                      client = boto3.client("ec2")
                      response = client.describe_vpcs(VpcIds=[event["ResourceProperties"]["VPCID"]])
                      response_data["VPCCIDR"] = response["Vpcs"][0]["CidrBlock"]
                      response_status = cfnresponse.SUCCESS
                  except Exception as e:
                      logging.error("failed to get default gateway IP: {}".format(str(e)))
                      response_status = cfnresponse.FAILED
                  finally:
                      cfnresponse.send(event, context, response_status, response_data)
      Description: GetVPCCIDRFunction
      Handler: index.handler
      Role: !GetAtt 'GetVPCCIDRRole.Arn'
      Runtime: python3.9
      Timeout: 30
    Type: AWS::Lambda::Function
  GetVPCCIDR:
    Properties:
      ServiceToken: !GetAtt 'GetVPCCIDRFunction.Arn'
      VPCID: !Ref 'VPCID'
    Type: AWS::CloudFormation::CustomResource
  ManagementSG:
    Properties:
      GroupName: !Sub '${AWS::StackName}-ManagementSG'
      GroupDescription: ManagementSG
      SecurityGroupIngress:
        - CidrIp: !GetAtt 'GetVPCCIDR.VPCCIDR'
          Description: Allow ALL within VPC
          IpProtocol: '-1'
        - CidrIp: !Ref 'RestrictedSSHCIDR'
          Description: SSH
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref 'RestrictedWebAppCIDR'
          Description: HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref 'RestrictedWebAppCIDR'
          Description: HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref 'VPCID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ManagementSG'
    Type: AWS::EC2::SecurityGroup
    Condition: CreateManagementSGCondition
  ClientSG:
    Properties:
      GroupName: !Sub '${AWS::StackName}-ClientSG'
      GroupDescription: ClientSG
      SecurityGroupIngress:
        - CidrIp: !Ref 'RestrictedWebAppCIDR'
          Description: HTTP
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref 'RestrictedWebAppCIDR'
          Description: HTTPS
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref 'VPCID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ClientSG'
    Type: AWS::EC2::SecurityGroup
    Condition: CreateClientSGCondition
  ServerSG:
    Properties:
      GroupName: !Sub '${AWS::StackName}-ServerSG'
      GroupDescription: ServerSG
      SecurityGroupIngress:
        - CidrIp: !GetAtt 'GetVPCCIDR.VPCCIDR'
          Description: Allow ALL within VPC
          IpProtocol: '-1'
      VpcId: !Ref 'VPCID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ServerSG'
    Type: AWS::EC2::SecurityGroup
    Condition: CreateServerSGCondition
