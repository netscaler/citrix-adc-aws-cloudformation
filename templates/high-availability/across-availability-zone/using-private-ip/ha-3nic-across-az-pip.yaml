Description: This template provisions two Citrix ADC VPX in two different AWS Availability
  Zones and configures them as High-Availabile using Private IP.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      VPCID:
        default: VPC ID to deploy the Citrix ADC
      RouteTableID:
        default: Enter the Route Table ID where Citrix ADC will be deployed
      RestrictedManagementCIDR:
        default: Source address range to access Citric ADC management interfaces via
          SSH, HTTP, HTTPS ports
      PrimaryManagementPrivateSubnetID:
        default: Subnet ID associated with Primary ADC Management interface
      PrimaryManagementPrivateIP:
        default: (Optional) Primary Management Private IP (NSIP)
      PrimaryClientPublicSubnetID:
        default: Subnet ID associated with Primary ADC Client interface (Traffic coming
          from `client` to the `ADC VIP`)
      PrimaryClientPrivateIP:
        default: (Optional) Primary Client Private IP (VIP)
      PrimaryServerPrivateSubnetID:
        default: Subnet ID associated with Primary ADC Server interface (Traffic leaving
          from the `ADC SNIP` to the `backend servers`)
      PrimaryServerPrivateIP:
        default: (Optional) Primary Server Private IP (SNIP)
      SecondaryManagementPrivateSubnetID:
        default: Subnet ID associated with Secondary ADC Management interface
      SecondaryManagementPrivateIP:
        default: (Optional) Secondary Management Private IP (NSIP)
      SecondaryClientPublicSubnetID:
        default: Subnet ID associated with Secondary ADC Client interface (Traffic
          coming from `client` to the `ADC VIP`)
      SecondaryClientPrivateIP:
        default: (Optional) Secondary Client Private IP (VIP)
      SecondaryServerPrivateSubnetID:
        default: Subnet ID associated with Secondary ADC Server interface (Traffic
          leaving from the `ADC SNIP` to the `backend servers`)
      SecondaryServerPrivateIP:
        default: (Optional) Secondary Server Private IP (SNIP)
      VPCTenancy:
        default: ''
      KeyPairName:
        default: Keypair to associate to ADCs
      CitrixADCInstanceType:
        default: Citrix ADC instance type
      PublishCloudwatchMetrics:
        default: Publish custom metrics to CloudWatch?
      ChosenCIDROutsideVPC:
        default: Private Load Balancer VIP CIDR Range (e.g if VPC CIDR is 10.0.0.0/16
          then provide any CIDR outside this VPC CIDR range.)
      LBVserverVIP:
        default: (Optional) LBVserver VIP IP
      ManagementENIEIP:
        default: Should PublicIP(EIP) be assigned to management interfaces?
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - RouteTableID
          - RestrictedManagementCIDR
          - PrimaryManagementPrivateSubnetID
          - PrimaryManagementPrivateIP
          - PrimaryClientPublicSubnetID
          - PrimaryClientPrivateIP
          - PrimaryServerPrivateSubnetID
          - PrimaryServerPrivateIP
          - SecondaryManagementPrivateSubnetID
          - SecondaryManagementPrivateIP
          - SecondaryClientPublicSubnetID
          - SecondaryClientPrivateIP
          - SecondaryServerPrivateSubnetID
          - SecondaryServerPrivateIP
          - VPCTenancy
      - Label:
          default: Citrix ADC Configuration
        Parameters:
          - KeyPairName
          - CitrixADCInstanceType
          - PublishCloudwatchMetrics
      - Label:
          default: Private Network Traffic Configuration
        Parameters:
          - ChosenCIDROutsideVPC
          - LBVserverVIP
      - Label:
          default: (Optional) Elastic IP Configuration
        Parameters:
          - ManagementENIEIP
Conditions:
  AssignEIP2ManagementENI: !Equals
    - !Ref 'ManagementENIEIP'
    - 'Yes'
  ConfigureLBVserver: !Not
    - !Equals
      - !Ref 'LBVserverVIP'
      - ''
  UsePrimaryManagementPrivateIP: !Not
    - !Equals
      - !Ref 'PrimaryManagementPrivateIP'
      - ''
  UsePrimaryClientPrivateIP: !Not
    - !Equals
      - !Ref 'PrimaryClientPrivateIP'
      - ''
  UsePrimaryServerPrivateIP: !Not
    - !Equals
      - !Ref 'PrimaryServerPrivateIP'
      - ''
  UseSecondaryManagementPrivateIP: !Not
    - !Equals
      - !Ref 'SecondaryManagementPrivateIP'
      - ''
  UseSecondaryClientPrivateIP: !Not
    - !Equals
      - !Ref 'SecondaryClientPrivateIP'
      - ''
  UseSecondaryServerPrivateIP: !Not
    - !Equals
      - !Ref 'SecondaryServerPrivateIP'
      - ''
Mappings:
  AWSAMIRegionMap:
    AMI:
      CITRIXADC: Citrix ADC VPX
    us-gov-west-1:
      CITRIXADC: ami-0868efeaf9c152894
    us-gov-east-1:
      CITRIXADC: ami-0d4150b2e003904df
    us-east-2:
      CITRIXADC: ami-0f985d34e2f49365b
    us-east-1:
      CITRIXADC: ami-0e781809f5122ff36
    us-west-1:
      CITRIXADC: ami-08e62dea052e74437
    us-west-2:
      CITRIXADC: ami-02b88538994a8d8e1
    ap-east-1:
      CITRIXADC: ami-059145d3281116e7b
    ap-south-1:
      CITRIXADC: ami-0e8400eb018a0e489
    ap-northeast-2:
      CITRIXADC: ami-0fc0346aa29abbaa8
    ap-southeast-1:
      CITRIXADC: ami-0b3cd610b87691e20
    ap-southeast-2:
      CITRIXADC: ami-05880320ec3467ee8
    ap-northeast-1:
      CITRIXADC: ami-06a47fdc0c69f80e2
    ca-central-1:
      CITRIXADC: ami-0c403dbe2ed622bd6
    eu-central-1:
      CITRIXADC: ami-078b5199e43011130
    eu-west-1:
      CITRIXADC: ami-02b7f3b3ea2270b61
    eu-west-2:
      CITRIXADC: ami-06d4196d302fd2b48
    eu-west-3:
      CITRIXADC: ami-06dd263ba54edeebe
    eu-north-1:
      CITRIXADC: ami-0fd8144bedbb666e7
    eu-south-1:
      CITRIXADC: ami-03fb8a722562cd68e
    sa-east-1:
      CITRIXADC: ami-012494ef2d0db90ca
    me-south-1:
      CITRIXADC: ami-031f884e1f19f230f
    af-south-1:
      CITRIXADC: ami-0de1eaf3cf4860b3c
Outputs:
  CitrixADCIAMRole:
    Description: Citrix ADC IAM Role
    Export:
      Name: !Sub '${AWS::StackName}-CitrixADCIAMRole'
    Value: !Sub 'https://console.aws.amazon.com/iam/home#/roles/${CitrixADCIAMRole}'
  CitrixADCInstanceProfile:
    Description: Citrix ADC IAM Instance Profile
    Export:
      Name: !Sub '${AWS::StackName}-CitrixADCInstanceProfile'
    Value: !Ref 'CitrixADCInstanceProfile'
  ManagementSG:
    Description: Allow restricted inbound traffic from SSH, HTTP, HTTPS ports and
      everything via TCP within Management Security Group and allow all outbound traffic
      to all destination
    Export:
      Name: !Sub '${AWS::StackName}-ManagementSG'
    Value: !Ref 'ManagementSG'
  PrimaryManagementPrivateIP:
    Description: Primary ADC Management Private IP (NSIP)
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryManagementPrivateIP'
    Value: !GetAtt 'PrimaryManagementENI.PrimaryPrivateIpAddress'
  PrimaryClientPrivateIP:
    Description: Primary ADC Client Private IP (VIP)
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryClientPrivateIP'
    Value: !GetAtt 'PrimaryClientENI.PrimaryPrivateIpAddress'
  PrimaryServerPrivateIP:
    Description: Primary ADC Server Private IP (SNIP)
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryServerPrivateIP'
    Value: !GetAtt 'PrimaryServerENI.PrimaryPrivateIpAddress'
  SecondaryManagementPrivateIP:
    Description: Secondary ADC Management Private IP (NSIP)
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryManagementPrivateIP'
    Value: !GetAtt 'SecondaryManagementENI.PrimaryPrivateIpAddress'
  SecondaryClientPrivateIP:
    Description: Secondary ADC Client Private IP (VIP)
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryClientPrivateIP'
    Value: !GetAtt 'SecondaryClientENI.PrimaryPrivateIpAddress'
  SecondaryServerPrivateIP:
    Description: Secondary ADC Server Private IP (SNIP)
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryServerPrivateIP'
    Value: !GetAtt 'SecondaryServerENI.PrimaryPrivateIpAddress'
  PrimaryManagementEIP:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryManagementEIP'
    Value: !Ref 'PrimaryManagementEIP'
    Condition: AssignEIP2ManagementENI
  SecondaryManagementEIP:
    Description: ''
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryManagementEIP'
    Value: !Ref 'SecondaryManagementEIP'
    Condition: AssignEIP2ManagementENI
  PrimaryADCInstanceID:
    Description: Primary Citrix ADC Instance ID
    Export:
      Name: !Sub '${AWS::StackName}-PrimaryADCInstanceID'
    Value: !Ref 'PrimaryInstance'
  SecondaryADCInstanceID:
    Description: Secondary Citrix ADC Instance ID
    Export:
      Name: !Sub '${AWS::StackName}-SecondaryADCInstanceID'
    Value: !Ref 'SecondaryInstance'
Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ''
  RestrictedManagementCIDR:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  PrimaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  PrimaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  PrimaryServerPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  SecondaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  SecondaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  SecondaryServerPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ''
  VPCTenancy:
    Type: String
    Description: ''
    Default: default
    AllowedValues:
      - default
      - dedicated
  CitrixADCInstanceType:
    Type: String
    Description: ''
    Default: m5.xlarge
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  KeyPairName:
    Description: ''
    Type: AWS::EC2::KeyPair::KeyName
  PrimaryManagementPrivateIP:
    Type: String
    Default: ''
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  PrimaryClientPrivateIP:
    Type: String
    Default: ''
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  PrimaryServerPrivateIP:
    Type: String
    Default: ''
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  SecondaryManagementPrivateIP:
    Type: String
    Default: ''
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  SecondaryClientPrivateIP:
    Type: String
    Default: ''
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  SecondaryServerPrivateIP:
    Type: String
    Default: ''
    Description: If not specified, the private ip will be auto assigned
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  ManagementENIEIP:
    Type: String
    Description: ''
    Default: 'No'
    AllowedValues:
      - 'No'
      - 'Yes'
  PublishCloudwatchMetrics:
    Type: String
    Description: ''
    Default: 'Yes'
    AllowedValues:
      - 'No'
      - 'Yes'
  ChosenCIDROutsideVPC:
    Type: String
    Description: LB VServers need to be created from this CIDR
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  LBVserverVIP:
    Type: String
    Default: ''
    Description: Should be an IP address from the above CIDR. If left blank, CFT wont create a sample_lb_vserver
    AllowedPattern: ()|(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  RouteTableID:
    Type: String
    Description: ''
    AllowedPattern: ^rtb-[a-z0-9]{17}$
    ConstraintDescription: 'Required Parameter: Input valid Route Table ID'
AWSTemplateFormatVersion: '2010-09-09'
Resources:
  CitrixADCIAMRole:
    Properties:
      Path: /
      Description: Citrix ADC IAM Role
      Policies:
        - PolicyName: Citrixadc-instance-policy-ha-private-ip
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeAddresses
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
                  - ec2:DescribeRouteTables
                  - ec2:DeleteRoute
                  - ec2:CreateRoute
                  - ec2:ModifyNetworkInterfaceAttribute
                  - iam:SimulatePrincipalPolicy
                  - iam:GetRole
                Resource: '*'
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
    Type: AWS::IAM::Role
  CitrixADCInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref 'CitrixADCIAMRole'
    Type: AWS::IAM::InstanceProfile
  ManagementSG:
    Properties:
      GroupName: !Sub '${AWS::StackName}-ManagementSG'
      GroupDescription: Allow restricted inbound traffic from SSH, HTTP, HTTPS ports
        and everything via TCP within Management Security Group and allow all outbound
        traffic to all destination
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all traffic to all destination
          IpProtocol: '-1'
      SecurityGroupIngress:
        - CidrIp: !Ref 'RestrictedManagementCIDR'
          Description: SSH port
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref 'RestrictedManagementCIDR'
          Description: HTTP port
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref 'RestrictedManagementCIDR'
          Description: HTTPS port
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
      VpcId: !Ref 'VPCID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-ManagementSG'
    Type: AWS::EC2::SecurityGroup
  ManagementInboundRule:
    Properties:
      GroupId: !GetAtt 'ManagementSG.GroupId'
      SourceSecurityGroupId: !GetAtt 'ManagementSG.GroupId'
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      Description: ManagementSG
    Type: AWS::EC2::SecurityGroupIngress
  PrimaryManagementENI:
    Properties:
      Description: Primary ADC Management Private IP (NSIP)
      GroupSet:
        - !Ref 'ManagementSG'
      PrivateIpAddress: !If
        - UsePrimaryManagementPrivateIP
        - !Ref 'PrimaryManagementPrivateIP'
        - !Ref 'AWS::NoValue'
      SubnetId: !Ref 'PrimaryManagementPrivateSubnetID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryManagementENI'
    Type: AWS::EC2::NetworkInterface
  PrimaryClientENI:
    Properties:
      Description: Primary ADC Client Private IP (VIP)
      GroupSet: []
      PrivateIpAddress: !If
        - UsePrimaryClientPrivateIP
        - !Ref 'PrimaryClientPrivateIP'
        - !Ref 'AWS::NoValue'
      SubnetId: !Ref 'PrimaryClientPublicSubnetID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryClientENI'
    Type: AWS::EC2::NetworkInterface
  PrimaryServerENI:
    Properties:
      Description: Primary ADC Server Private IP (SNIP)
      GroupSet: []
      PrivateIpAddress: !If
        - UsePrimaryServerPrivateIP
        - !Ref 'PrimaryServerPrivateIP'
        - !Ref 'AWS::NoValue'
      SubnetId: !Ref 'PrimaryServerPrivateSubnetID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryServerENI'
    Type: AWS::EC2::NetworkInterface
  SecondaryManagementENI:
    Properties:
      Description: Secondary ADC Management Private IP (NSIP)
      GroupSet:
        - !Ref 'ManagementSG'
      PrivateIpAddress: !If
        - UseSecondaryManagementPrivateIP
        - !Ref 'SecondaryManagementPrivateIP'
        - !Ref 'AWS::NoValue'
      SubnetId: !Ref 'SecondaryManagementPrivateSubnetID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryManagementENI'
    Type: AWS::EC2::NetworkInterface
  SecondaryClientENI:
    Properties:
      Description: Secondary ADC Client Private IP (VIP)
      GroupSet: []
      PrivateIpAddress: !If
        - UseSecondaryClientPrivateIP
        - !Ref 'SecondaryClientPrivateIP'
        - !Ref 'AWS::NoValue'
      SubnetId: !Ref 'SecondaryClientPublicSubnetID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryClientENI'
    Type: AWS::EC2::NetworkInterface
  SecondaryServerENI:
    Properties:
      Description: Secondary ADC Server Private IP (SNIP)
      GroupSet: []
      PrivateIpAddress: !If
        - UseSecondaryServerPrivateIP
        - !Ref 'SecondaryServerPrivateIP'
        - !Ref 'AWS::NoValue'
      SubnetId: !Ref 'SecondaryServerPrivateSubnetID'
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryServerENI'
    Type: AWS::EC2::NetworkInterface
  PrimaryManagementEIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryManagementEIP'
    Type: AWS::EC2::EIP
    Condition: AssignEIP2ManagementENI
  AssociatePrimaryManagementEIP2ENI:
    Properties:
      AllocationId: !GetAtt 'PrimaryManagementEIP.AllocationId'
      NetworkInterfaceId: !Ref 'PrimaryManagementENI'
      PrivateIpAddress: !GetAtt 'PrimaryManagementENI.PrimaryPrivateIpAddress'
    Type: AWS::EC2::EIPAssociation
    Condition: AssignEIP2ManagementENI
  SecondaryManagementEIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryManagementEIP'
    Type: AWS::EC2::EIP
    Condition: AssignEIP2ManagementENI
  AssociateSecondaryManagementEIP2ENI:
    Properties:
      AllocationId: !GetAtt 'SecondaryManagementEIP.AllocationId'
      NetworkInterfaceId: !Ref 'SecondaryManagementENI'
      PrivateIpAddress: !GetAtt 'SecondaryManagementENI.PrimaryPrivateIpAddress'
    Type: AWS::EC2::EIPAssociation
    Condition: AssignEIP2ManagementENI
  PrimaryInstance:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-PrimaryInstance'
      IamInstanceProfile: !Ref 'CitrixADCInstanceProfile'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - CITRIXADC
      InstanceType: !Ref 'CitrixADCInstanceType'
      KeyName: !Ref 'KeyPairName'
      NetworkInterfaces:
        - DeviceIndex: '0'
          NetworkInterfaceId: !Ref 'PrimaryManagementENI'
        - DeviceIndex: '1'
          NetworkInterfaceId: !Ref 'PrimaryClientENI'
        - DeviceIndex: '2'
          NetworkInterfaceId: !Ref 'PrimaryServerENI'
      Tenancy: !Ref 'VPCTenancy'
      UserData: !If
          - ConfigureLBVserver
          - Fn::Base64:
              Fn::Sub: |-
                PublishCloudwatchMetrics=${PublishCloudwatchMetrics}
                <NS-PRE-BOOT-CONFIG>
                    <NS-CONFIG>
                        set systemparameter -promptString "%u@%s"
                        add ha node 1 ${SecondaryManagementENI.PrimaryPrivateIpAddress} -inc ENABLED
                        add lb vserver sample_lb_vserver HTTP ${LBVserverVIP} 80
                    </NS-CONFIG>
                </NS-PRE-BOOT-CONFIG>
          - Fn::Base64:
              Fn::Sub: |-
                PublishCloudwatchMetrics=${PublishCloudwatchMetrics}
                <NS-PRE-BOOT-CONFIG>
                    <NS-CONFIG>
                        set systemparameter -promptString "%u@%s"
                        add ha node 1 ${SecondaryManagementENI.PrimaryPrivateIpAddress} -inc ENABLED
                    </NS-CONFIG>
                </NS-PRE-BOOT-CONFIG>
    Type: AWS::EC2::Instance
  SecondaryInstance:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-SecondaryInstance'
      IamInstanceProfile: !Ref 'CitrixADCInstanceProfile'
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref 'AWS::Region'
        - CITRIXADC
      InstanceType: !Ref 'CitrixADCInstanceType'
      KeyName: !Ref 'KeyPairName'
      NetworkInterfaces:
        - DeviceIndex: '0'
          NetworkInterfaceId: !Ref 'SecondaryManagementENI'
        - DeviceIndex: '1'
          NetworkInterfaceId: !Ref 'SecondaryClientENI'
        - DeviceIndex: '2'
          NetworkInterfaceId: !Ref 'SecondaryServerENI'
      Tenancy: !Ref 'VPCTenancy'
      UserData: !Base64
        Fn::Sub: |-
          PublishCloudwatchMetrics=${PublishCloudwatchMetrics}
          <NS-PRE-BOOT-CONFIG>
               <NS-CONFIG>
                   set systemparameter -promptString "%u@%s"
                   add ha node 1 ${PrimaryManagementENI.PrimaryPrivateIpAddress} -inc ENABLED
               </NS-CONFIG>
          </NS-PRE-BOOT-CONFIG>
    Type: AWS::EC2::Instance
    DependsOn: PrimaryInstance
  ChosenCIDRRoute:
    Properties:
      DestinationCidrBlock: !Sub '${ChosenCIDROutsideVPC}'
      NetworkInterfaceId: !Ref 'PrimaryClientENI'
      RouteTableId: !Ref 'RouteTableID'
    Type: AWS::EC2::Route

