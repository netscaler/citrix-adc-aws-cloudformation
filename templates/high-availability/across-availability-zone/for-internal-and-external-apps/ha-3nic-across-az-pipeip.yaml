Description: >
  This template provisions two Citrix ADC VPX in two different AWS Availability
  Zones and configures them as High-Available.
Metadata:
  AWS::CloudFormation::Interface:
    ParameterLabels:
      VPCID:
        default: VPC ID to deploy the Citrix ADC
      VPCCIDR:
        default: VPC CIDR of the above selected VPC
      RouteTableID:
        default: Enter the Route Table ID where Citrix ADC will be deployed
      RestrictedManagementCIDR:
        default:
          Source address range to access Citric ADC management interfaces via
          SSH, HTTP, HTTPS ports
      PrimaryManagementPrivateSubnetID:
        default: Subnet ID associated with Primary ADC Management interface
      PrimaryClientPublicSubnetID:
        default:
          Subnet ID associated with Primary ADC Client interface (Traffic coming
          from `client` to the `ADC VIP`)
      PrimaryServerPrivateSubnetID:
        default:
          Subnet ID associated with Primary ADC Server interface (Traffic leaving
          from the `ADC SNIP` to the `backend servers`)
      SecondaryManagementPrivateSubnetID:
        default: Subnet ID associated with Secondary ADC Management interface
      SecondaryClientPublicSubnetID:
        default:
          Subnet ID associated with Secondary ADC Client interface (Traffic
          coming from `client` to the `ADC VIP`)
      SecondaryServerPrivateSubnetID:
        default:
          Subnet ID associated with Secondary ADC Server interface (Traffic
          leaving from the `ADC SNIP` to the `backend servers`)
      VPCTenancy:
        default: ""
      CitrixADCImageID:
        default: Do you have any custom Citrix ADC AMI to be deployed?
      KeyPairName:
        default: Keypair to associate to ADCs
      CitrixADCInstanceType:
        default: Citrix ADC instance type
      PublishCloudwatchMetrics:
        default: Publish custom metrics to CloudWatch?
      ChosenCIDROutsideVPC:
        default:
          Private Load Balancer VIP CIDR Range (e.g if VPC CIDR is 10.0.0.0/16
          then provide any CIDR outside this VPC CIDR range.)
      InternalLBVIP:
        default: Internal LB VIP IP (Should be in the above Private Load Balancer VIP CIDR Range)
      ManagementENIEIP:
        default: Should PublicIP(EIP) be assigned to management interfaces?
      ADCCustomPassword:
        default: Citrix ADC management login Password

      ADCRegistration2ADMService:
        default: Do you want to register the ADC to ADM Service?
      ADMAgentIP:
        default: Reachable External ADM Agent IP address
      ADMAgentDeployment:
        default: Do you want to deploy a new ADM Agent?
      ADMAgentInstanceType:
        default: Citrix CitrixADMAgent instance type
      CustomerID:
        default: Your Citrix cloud 'Customer ID (Tenant ID)'
      ClientID:
        default: Your Citrix cloud API 'Client ID'
      ClientSecret:
        default: Your Citrix cloud API 'Client Secret'
    ParameterGroups:
      - Label:
          default: Network Configuration
        Parameters:
          - VPCID
          - VPCCIDR
          - RouteTableID
          - RestrictedManagementCIDR
          - PrimaryManagementPrivateSubnetID
          - PrimaryClientPublicSubnetID
          - PrimaryServerPrivateSubnetID
          - SecondaryManagementPrivateSubnetID
          - SecondaryClientPublicSubnetID
          - SecondaryServerPrivateSubnetID
          - VPCTenancy
      - Label:
          default: Citrix ADC Configuration
        Parameters:
          - CitrixADCImageID
          - ADCCustomPassword
          - KeyPairName
          - CitrixADCInstanceType
          - PublishCloudwatchMetrics
          - ManagementENIEIP
      - Label:
          default: Private Network Traffic Configuration for Internal Apps
        Parameters:
          - ChosenCIDROutsideVPC
          - InternalLBVIP

      - Label:
          default: Citrix ADM Agent Configuration (Optional)
        Parameters:
          - ADCRegistration2ADMService
          - ADMAgentIP
          - ADMAgentDeployment
          - ClientID
          - ClientSecret
          - CustomerID
          - ADMAgentInstanceType

Conditions:
  UseCustomADCAMI: !Not
    - !Equals
      - !Ref "CitrixADCImageID"
      - ""
  AssignEIP2ManagementENI: !Equals
    - !Ref "ManagementENIEIP"
    - "Yes"
  DeployADMAgent: !Equals [!Ref ADMAgentDeployment, "Yes"]
  RegisterADC2ADMService: !Equals [!Ref ADCRegistration2ADMService, "Yes"]

Mappings:
  AWSAMIRegionMap:
    AMI:
      CITRIXADC: Citrix ADC VPX Customer Licensed 13.1-12.51 (Feb 03 2022)
      ADMAGENT: Citrix ADM Agent 13.1-19.24 (Jan 27 2022)
    us-gov-west-1:
      CITRIXADC: ami-0242a9417711bc75d
      ADMAGENT: ami-0637b6337298ae2f9
    us-gov-east-1:
      CITRIXADC: ami-06a01cbb4544e2301
      ADMAGENT: ami-0f8785bc61da6a8be
    us-east-2:
      CITRIXADC: ami-05da437eade2b3f61
      ADMAGENT: ami-0185fc30dc461b345
    us-east-1:
      CITRIXADC: ami-00c74aa43b1b8e9cc
      ADMAGENT: ami-08981e05263a43860
    us-west-1:
      CITRIXADC: ami-006f6c4ec5c2a3c87
      ADMAGENT: ami-07f2113acdcf0d499
    us-west-2:
      CITRIXADC: ami-0f26166922f57f54f
      ADMAGENT: ami-0555740d0d3595807
    ap-east-1:
      CITRIXADC: ami-0ac40d463dcd43adf
      ADMAGENT: ami-00e81c0c8f4017d77
    ap-south-1:
      CITRIXADC: ami-0c236379ba54100ea
      ADMAGENT: ami-0999608f6eb2c32e9
    ap-northeast-2:
      CITRIXADC: ami-02fba680edab26bad
      ADMAGENT: ami-05b59bab134dd6ad6
    ap-southeast-1:
      CITRIXADC: ami-0c18f07bbfc647f73
      ADMAGENT: ami-0bdb7052037a7f4ae
    ap-southeast-2:
      CITRIXADC: ami-01929c66f93e06808
      ADMAGENT: ami-01969c9e888e1d84d
    ap-northeast-1:
      CITRIXADC: ami-0d32c9782b0dafa66
      ADMAGENT: ami-01ea4e1795bf502bb
    ca-central-1:
      CITRIXADC: ami-061daf38969102571
      ADMAGENT: ami-0dc917f0db7dccb70
    eu-central-1:
      CITRIXADC: ami-04cc32afce2e09927
      ADMAGENT: ami-08c53e761b1c713eb
    eu-west-1:
      CITRIXADC: ami-04936904527679056
      ADMAGENT: ami-0c15d4b8d0f458af4
    eu-west-2:
      CITRIXADC: ami-0dd0aa051b3fc4e4b
      ADMAGENT: ami-0728041db4bad4143
    eu-west-3:
      CITRIXADC: ami-0ee4ea493a900a192
      ADMAGENT: ami-080cd8f69dd85e8bd
    eu-north-1:
      CITRIXADC: ami-0ce97179f7d9eb91b
      ADMAGENT: ami-06c1b235c0eba085a
    sa-east-1:
      CITRIXADC: ami-041f8d11eab0c1169
      ADMAGENT: ami-0f4ac30069a8fd7a4

Outputs:
  CitrixADCIAMRole:
    Description: Citrix ADC IAM Role
    Export:
      Name: !Sub "${AWS::StackName}-CitrixADCIAMRole"
    Value: !Sub "https://console.aws.amazon.com/iam/home#/roles/${CitrixADCIAMRole}"
  CitrixADCInstanceProfile:
    Description: Citrix ADC IAM Instance Profile
    Export:
      Name: !Sub "${AWS::StackName}-CitrixADCInstanceProfile"
    Value: !Ref "CitrixADCInstanceProfile"
  ManagementSG:
    Description:
      Allow restricted inbound traffic from SSH, HTTP, HTTPS ports and
      everything via TCP within Management Security Group and allow all outbound traffic
      to all destination
    Export:
      Name: !Sub "${AWS::StackName}-ManagementSG"
    Value: !Ref "ManagementSG"
  PrimaryManagementPrivateIP:
    Description: Primary ADC Management Private IP (NSIP)
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryManagementPrivateIP"
    Value: !GetAtt "PrimaryManagementENI.PrimaryPrivateIpAddress"
  PrimaryClientPrivateIP:
    Description: Primary ADC Client Private IP (VIP)
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryClientPrivateIP"
    Value: !GetAtt "PrimaryClientENI.PrimaryPrivateIpAddress"
  PrimaryServerPrivateIP:
    Description: Primary ADC Server Private IP (SNIP)
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryServerPrivateIP"
    Value: !GetAtt "PrimaryServerENI.PrimaryPrivateIpAddress"
  SecondaryManagementPrivateIP:
    Description: Secondary ADC Management Private IP (NSIP)
    Export:
      Name: !Sub "${AWS::StackName}-SecondaryManagementPrivateIP"
    Value: !GetAtt "SecondaryManagementENI.PrimaryPrivateIpAddress"
  SecondaryClientPrivateIP:
    Description: Secondary ADC Client Private IP (VIP)
    Export:
      Name: !Sub "${AWS::StackName}-SecondaryClientPrivateIP"
    Value: !GetAtt "SecondaryClientENI.PrimaryPrivateIpAddress"
  SecondaryServerPrivateIP:
    Description: Secondary ADC Server Private IP (SNIP)
    Export:
      Name: !Sub "${AWS::StackName}-SecondaryServerPrivateIP"
    Value: !GetAtt "SecondaryServerENI.PrimaryPrivateIpAddress"
  PrimaryManagementEIP:
    Description: ""
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryManagementEIP"
    Value: !Ref "PrimaryManagementEIP"
    Condition: AssignEIP2ManagementENI
  SecondaryManagementEIP:
    Description: ""
    Export:
      Name: !Sub "${AWS::StackName}-SecondaryManagementEIP"
    Value: !Ref "SecondaryManagementEIP"
    Condition: AssignEIP2ManagementENI
  PrimaryADCInstanceID:
    Description: Primary Citrix ADC Instance ID
    Export:
      Name: !Sub "${AWS::StackName}-PrimaryADCInstanceID"
    Value: !Ref "PrimaryInstance"
  SecondaryADCInstanceID:
    Description: Secondary Citrix ADC Instance ID
    Export:
      Name: !Sub "${AWS::StackName}-SecondaryADCInstanceID"
    Value: !Ref "SecondaryInstance"
  ADMAgentEIP:
    Condition: DeployADMAgent
    Value: !Ref ADMAgentManagementEIP
    Description: Public IP address of the ADM Agent
    Export:
      Name: !Sub "${AWS::StackName}-ADMAgentEIP"
  ADMAgentPrivateIP:
    Condition: DeployADMAgent
    Value: !GetAtt ADMAgentManagementENI.PrimaryPrivateIpAddress
    Description: Private IP address of the ADM Agent
    Export:
      Name: !Sub "${AWS::StackName}-ADMAgentPrivateIP"
  ADMAgentInstanceID:
    Condition: DeployADMAgent
    Value: !Ref ADMAgentInstance
    Description: Instance ID of the ADM Agent
    Export:
      Name: !Sub "${AWS::StackName}-ADMAgentInstanceID"

Parameters:
  VPCID:
    Type: AWS::EC2::VPC::Id
    Description: ""
  RestrictedManagementCIDR:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  PrimaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  PrimaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  PrimaryServerPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  SecondaryManagementPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  SecondaryClientPublicSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  SecondaryServerPrivateSubnetID:
    Type: AWS::EC2::Subnet::Id
    Description: ""
  VPCTenancy:
    Type: String
    Description: ""
    Default: default
    AllowedValues:
      - default
      - dedicated
  CitrixADCInstanceType:
    Type: String
    Description: ""
    Default: m5.xlarge
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  CitrixADCImageID:
    Type: String
    Description: If left empty, the AMI from the CFT will be deployed. Refer here for the latest AMI IDs - https://github.com/citrix/citrix-adc-aws-cloudformation/blob/master/templates/README.md
    AllowedPattern: ^$|^ami-[a-z0-9]{17}$
    ConstraintDescription: CitrixADCImageID should either be empty OR valid AMI ID
  KeyPairName:
    Description: ""
    Type: AWS::EC2::KeyPair::KeyName
  ManagementENIEIP:
    Type: String
    Description: ""
    Default: "No"
    AllowedValues:
      - "No"
      - "Yes"
  PublishCloudwatchMetrics:
    Type: String
    Description: ""
    Default: "Yes"
    AllowedValues:
      - "No"
      - "Yes"
  ChosenCIDROutsideVPC:
    Type: String
    Description: LB VServers for internal apps to be created from this CIDR. e.g if VPC CIDR is 10.0.0.0/16 then provide any CIDR outside this VPC CIDR range Eg. 192.168.0.0/16
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  InternalLBVIP:
    Type: String
    Description: Should be an IP address from the above CIDR. Eg., if the above Private LB VIP CIDR range is 192.168.0.0/16, then Internal LB VIP IP can be 192.168.10.10
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})
    ConstraintDescription: Must be a valid IP of the form x.x.x.x
  RouteTableID:
    Type: String
    Description: "Give any routing table associate with the above VPC. Go to VPC->RouteTables in AWS Console."
    AllowedPattern: ^rtb-[a-z0-9]{17}$
    ConstraintDescription: "Required Parameter: Input valid Route Table ID"

  ADCCustomPassword:
    Type: String
    NoEcho: true
    AllowedPattern: '[.\S]{8,15}'
    ConstraintDescription:
      Password length must be minimum 8 and maximum 15 characters.
      Whitespace characters not allowed.
  ADMAgentDeployment:
    Description: If you select 'No', only give 'Citrix ADM Agent IP' above and ignore the rest of the parametes in this section.
    Type: String
    Default: "No"
    AllowedValues:
      - "Yes"
      - "No"
  ADMAgentIP:
    Default: ""
    Description: Ignore this if you are deploying ADM Agent below. This IP will be auto assigned in the deployment process.
    Type: String

  VPCCIDR:
    Type: String
    Description: Must be a valid IP CIDR range of the form x.x.x.x/x
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: Must be a valid IP CIDR range of the form x.x.x.x/x
  ADMAgentInstanceType:
    Type: String
    Description: ""
    Default: m5.xlarge
    AllowedValues:
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
  ClientID:
    Description: "If do do not already have, Refer here: https://developer.cloud.com/citrix-cloud/citrix-cloud-api-overview/docs/get-started-with-citrix-cloud-apis"
    Type: String
    Default: ""
  ClientSecret:
    Description: "If do do not already have, Refer here: https://developer.cloud.com/citrix-cloud/citrix-cloud-api-overview/docs/get-started-with-citrix-cloud-apis"
    NoEcho: true
    Type: String
    Default: ""
  CustomerID:
    Description: "If do do not already have, Refer here: https://developer.cloud.com/citrix-cloud/citrix-cloud-api-overview/docs/get-started-with-citrix-cloud-apis"
    Type: String
    Default: ""

  ADCRegistration2ADMService:
    Type: String
    Description: "If you do not want to register the ADC to ADM Service, you can ignore the entire section. Know more about ADM Service here: https://www.citrix.com/products/citrix-application-delivery-management/"
    Default: "No"
    AllowedValues:
      - "No"
      - "Yes"

AWSTemplateFormatVersion: "2010-09-09"
Resources:
  CitrixADCIAMRole:
    Properties:
      Path: /
      Description: Citrix ADC IAM Role
      Policies:
        - PolicyName: Citrixadc-instance-policy-ha-private-ip
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Action:
                  - ec2:DescribeInstances
                  - ec2:DescribeAddresses
                  - ec2:AssociateAddress
                  - ec2:DisassociateAddress
                  - ec2:DescribeRouteTables
                  - ec2:DeleteRoute
                  - ec2:CreateRoute
                  - ec2:ModifyNetworkInterfaceAttribute
                  - iam:SimulatePrincipalPolicy
                  - iam:GetRole
                Resource: "*"
                Effect: Allow
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
    Type: AWS::IAM::Role
  CitrixADCInstanceProfile:
    Properties:
      Path: /
      Roles:
        - !Ref "CitrixADCIAMRole"
    Type: AWS::IAM::InstanceProfile
  ManagementSG:
    Properties:
      GroupName: !Sub "${AWS::StackName}-ManagementSG"
      GroupDescription:
        Allow restricted inbound traffic from SSH, HTTP, HTTPS ports
        and everything via TCP within Management Security Group and allow all outbound
        traffic to all destination
      SecurityGroupEgress:
        - CidrIp: 0.0.0.0/0
          Description: Allow all traffic to all destination
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !Ref "RestrictedManagementCIDR"
          Description: SSH port
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref "RestrictedManagementCIDR"
          Description: HTTP port
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
        - CidrIp: !Ref "RestrictedManagementCIDR"
          Description: HTTPS port
          IpProtocol: tcp
          FromPort: 443
          ToPort: 443
        - CidrIp: !Ref VPCCIDR
          Description: Allow all traffic from VPC
          IpProtocol: "-1"
      VpcId: !Ref "VPCID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ManagementSG"
    Type: AWS::EC2::SecurityGroup
  ManagementInboundRule:
    Properties:
      GroupId: !GetAtt "ManagementSG.GroupId"
      SourceSecurityGroupId: !GetAtt "ManagementSG.GroupId"
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      Description: ManagementSG
    Type: AWS::EC2::SecurityGroupIngress
  PrimaryManagementENI:
    Properties:
      Description: Primary ADC Management Private IP (NSIP)
      GroupSet:
        - !Ref "ManagementSG"
      SubnetId: !Ref "PrimaryManagementPrivateSubnetID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrimaryManagementENI"
    Type: AWS::EC2::NetworkInterface
  PrimaryClientENI:
    Properties:
      Description: Primary ADC Client Private IP (VIP)

      SubnetId: !Ref "PrimaryClientPublicSubnetID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrimaryClientENI"
    Type: AWS::EC2::NetworkInterface
  PrimaryServerENI:
    Properties:
      Description: Primary ADC Server Private IP (SNIP)
      SubnetId: !Ref "PrimaryServerPrivateSubnetID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrimaryServerENI"
    Type: AWS::EC2::NetworkInterface
  SecondaryManagementENI:
    Properties:
      Description: Secondary ADC Management Private IP (NSIP)
      GroupSet:
        - !Ref "ManagementSG"
      SubnetId: !Ref "SecondaryManagementPrivateSubnetID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecondaryManagementENI"
    Type: AWS::EC2::NetworkInterface
  SecondaryClientENI:
    Properties:
      Description: Secondary ADC Client Private IP (VIP)
      SubnetId: !Ref "SecondaryClientPublicSubnetID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecondaryClientENI"
    Type: AWS::EC2::NetworkInterface
  SecondaryServerENI:
    Properties:
      Description: Secondary ADC Server Private IP (SNIP)
      SubnetId: !Ref "SecondaryServerPrivateSubnetID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecondaryServerENI"
    Type: AWS::EC2::NetworkInterface
  ClientVIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ClientVIP"
    Type: AWS::EC2::EIP
  AssociateClientVIP2ENI:
    Properties:
      AllocationId: !GetAtt "ClientVIP.AllocationId"
      NetworkInterfaceId: !Ref "PrimaryClientENI"
      PrivateIpAddress: !GetAtt "PrimaryClientENI.PrimaryPrivateIpAddress"
    Type: AWS::EC2::EIPAssociation
  PrimaryManagementEIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrimaryManagementEIP"
    Type: AWS::EC2::EIP
    Condition: AssignEIP2ManagementENI
  AssociatePrimaryManagementEIP2ENI:
    Properties:
      AllocationId: !GetAtt "PrimaryManagementEIP.AllocationId"
      NetworkInterfaceId: !Ref "PrimaryManagementENI"
      PrivateIpAddress: !GetAtt "PrimaryManagementENI.PrimaryPrivateIpAddress"
    Type: AWS::EC2::EIPAssociation
    Condition: AssignEIP2ManagementENI
  SecondaryManagementEIP:
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecondaryManagementEIP"
    Type: AWS::EC2::EIP
    Condition: AssignEIP2ManagementENI
  AssociateSecondaryManagementEIP2ENI:
    Properties:
      AllocationId: !GetAtt "SecondaryManagementEIP.AllocationId"
      NetworkInterfaceId: !Ref "SecondaryManagementENI"
      PrivateIpAddress: !GetAtt "SecondaryManagementENI.PrimaryPrivateIpAddress"
    Type: AWS::EC2::EIPAssociation
    Condition: AssignEIP2ManagementENI
  PrimaryInstance:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-PrimaryInstance"
      IamInstanceProfile: !Ref "CitrixADCInstanceProfile"
      ImageId: !If
        - UseCustomADCAMI
        - !Ref CitrixADCImageID
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - CITRIXADC
      InstanceType: !Ref "CitrixADCInstanceType"
      KeyName: !Ref "KeyPairName"
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref "PrimaryManagementENI"
        - DeviceIndex: "1"
          NetworkInterfaceId: !Ref "PrimaryClientENI"
        - DeviceIndex: "2"
          NetworkInterfaceId: !Ref "PrimaryServerENI"
      Tenancy: !Ref "VPCTenancy"
      UserData: !Base64
        Fn::Sub: |-
          PublishCloudwatchMetrics=${PublishCloudwatchMetrics}
          <NS-PRE-BOOT-CONFIG>
              <NS-CONFIG>
                  set system user nsroot notnsroot
                  set systemparameter -promptString "%u@%s"
                  add ha node 1 ${SecondaryManagementENI.PrimaryPrivateIpAddress} -inc ENABLED
                  add ns ip ${SecondaryClientENI.PrimaryPrivateIpAddress} ${GetSubnetMaskCustomResource.Netmask} -type VIP
                  add ipset ha_ipset
                  bind ipset ha_ipset ${SecondaryClientENI.PrimaryPrivateIpAddress}
                  add ns ip ${InternalLBVIP} 255.255.255.255 -type VIP
                  add lb vserver external_lb HTTP ${PrimaryClientENI.PrimaryPrivateIpAddress} 80 -ipset ha_ipset
                  add lb vserver internal_lb HTTP ${InternalLBVIP} 80
              </NS-CONFIG>
          </NS-PRE-BOOT-CONFIG>
    Type: AWS::EC2::Instance
  SecondaryInstance:
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-SecondaryInstance"
      IamInstanceProfile: !Ref "CitrixADCInstanceProfile"
      ImageId: !If
        - UseCustomADCAMI
        - !Ref CitrixADCImageID
        - !FindInMap
          - AWSAMIRegionMap
          - !Ref "AWS::Region"
          - CITRIXADC
      InstanceType: !Ref "CitrixADCInstanceType"
      KeyName: !Ref "KeyPairName"
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref "SecondaryManagementENI"
        - DeviceIndex: "1"
          NetworkInterfaceId: !Ref "SecondaryClientENI"
        - DeviceIndex: "2"
          NetworkInterfaceId: !Ref "SecondaryServerENI"
      Tenancy: !Ref "VPCTenancy"
      UserData: !Base64
        Fn::Sub: |-
          PublishCloudwatchMetrics=${PublishCloudwatchMetrics}
          <NS-PRE-BOOT-CONFIG>
               <NS-CONFIG>
                   set system user nsroot notnsroot
                   add ha node 1 ${PrimaryManagementENI.PrimaryPrivateIpAddress} -inc ENABLED
                   add ns ip ${SecondaryClientENI.PrimaryPrivateIpAddress} ${GetSubnetMaskCustomResource.Netmask} -type VIP
                   add ipset ha_ipset
                   bind ipset ha_ipset ${SecondaryClientENI.PrimaryPrivateIpAddress}
               </NS-CONFIG>
          </NS-PRE-BOOT-CONFIG>
    Type: AWS::EC2::Instance
    DependsOn: PrimaryInstance
  ChosenCIDRRoute:
    Properties:
      DestinationCidrBlock: !Sub "${ChosenCIDROutsideVPC}"
      NetworkInterfaceId: !Ref "PrimaryClientENI"
      RouteTableId: !Ref "RouteTableID"
    Type: AWS::EC2::Route

  GetSubnetMaskLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: Return Subnet default gateway IP from its CIDR
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt GetSubnetMaskIAMRole.Arn
      Runtime: "python3.6"
      Timeout: 30
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import ipaddress
          ec2_client = boto3.client("ec2")
          cidr_to_netmask = lambda cidr: (str(ipaddress.IPv4Network(cidr).network_address), str(ipaddress.IPv4Network(cidr).netmask))
          def get_subnet_address(snid):
            filters = []
            subnets = ec2_client.describe_subnets(SubnetIds=[snid], Filters=filters)
            print(f"subnets: {subnets}")
            try:
              cidr = subnets["Subnets"][0]["CidrBlock"]
              return cidr_to_netmask(cidr)
            except Exception as e:
              raise Exception(f"ERROR: Could not get subnet details: {e}")
          def handler(event, context):
            status = cfnresponse.SUCCESS
            print(f"event: {event}")
            reason = None
            returndata = {}
            try:
              if event["RequestType"] == "Create":
                subnet_id = event["ResourceProperties"]["SubnetID"]
                returndata['Netmask'] = get_subnet_address(subnet_id)[1]
            except Exception as e:
              reason = f"Exception: {e}"
              print(reason)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, responseData=returndata, reason=reason)
  GetSubnetMaskCustomResource:
    Type: Custom::CIDR2GatewayIP
    Properties:
      ServiceToken: !GetAtt GetSubnetMaskLambda.Arn
      SubnetID: !Ref SecondaryClientPublicSubnetID

  GetSubnetMaskIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: !Sub describe-subnets-${AWS::StackName}
          PolicyDocument:
            Statement:
              - Action:
                  - ec2:DescribeSubnets
                Effect: Allow
                Resource: "*"
            Version: "2012-10-17"

  DelayRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
        Version: "2012-10-17"
      Description: ""
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies: []
    Type: AWS::IAM::Role

  DelayFunction:
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-DelayRole"
      Description: Delays execution of the next step in the deployment
      Handler: index.handler
      Role: !GetAtt DelayRole.Arn
      Runtime: python3.8
      Timeout: 900
      Code:
        ZipFile: |
          import time
          import cfnresponse
          def handler(event, context):
            lambda_status = cfnresponse.SUCCESS
            lambda_reason = None
            resp = {}
            try:
              if event["RequestType"] == "Create":
                print("Request = Create")
                time_to_sleep = int(event["ResourceProperties"]["Sleep"])
                print(f"Sleeping(waiting) for {time_to_sleep} seconds")
                time.sleep(time_to_sleep)
            except Exception as e:
              print(f"Exception: {e}")
              lambda_status = cfnresponse.FAILED
              lambda_reason = str(e)
            finally:
              cfnresponse.send(event, context, lambda_status, responseData=resp, reason=lambda_reason)

  WaitForADCInstancesToBeReady:
    DependsOn:
      - PrimaryInstance
      - SecondaryInstance
    Properties:
      Sleep: 400
      ServiceToken: !GetAtt DelayFunction.Arn
    Type: AWS::CloudFormation::CustomResource

  RegisterADCFunction:
    Condition: RegisterADC2ADMService
    Type: AWS::Lambda::Function
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-RegisterADCFunction"
      Description: RegisterADCFunction
      Handler: index.handler
      Role: !GetAtt "RegisterADCRole.Arn"
      Runtime: python3.8
      Timeout: 900
      Code:
        ZipFile: |
          import urllib.request, urllib.parse
          import json, random, string, time
          import cfnresponse
          HEADERS = {}
          print_json = lambda x: json.dumps(x)
          def open_url(url, headers, data=None, method='GET'):
            if data: data = data.encode('utf-8')
            req = urllib.request.Request(url, data, headers, method)
            try:
              with urllib.request.urlopen(req) as f:
                return f.status, f.reason, json.loads(f.read())
            except Exception as e:
              return e.code, e.reason, json.loads(e.read())
          def get_token(client_id, client_secret):
            url = 'https://api-us.cloud.com/cctrustoauth2/root/tokens/clients'
            params = {'grant_type': 'client_credentials', 'client_id': client_id, 'client_secret': client_secret}
            params = urllib.parse.urlencode(params)
            return open_url(url, {}, params, 'POST')
          def get_all_agents(customer_id):
            print("INSIDE get_all_agents()")
            agent_url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/mps_agent'
            status, reason, body = open_url(agent_url, HEADERS)
            print(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            return body['mps_agent']
          def get_agent(ip, customer_id):
              print("INSIDE get_agent()")
              all_agents = get_all_agents(customer_id)
              for agent in all_agents:
                if agent['name'] == ip and agent['platform'] == 'AWS':
                  if agent['state'].upper() == 'UP':
                    return agent
                  print("Agent is still down. Waiting for it to come up.")
              return None
          def create_new_profile(profilename, username, password, customer_id):
            print("INSIDE create_new_profile()")
            data = { "ns_device_profile": { "name": profilename, "username": username, "password": password, "snmpsecurityname": "test-snmp", } }
            url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/ns_device_profile'
            status, reason, body = open_url(url, HEADERS, json.dumps(data), 'POST')
            print(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            if status != 200: # 409 CONFLICT if profile already exists
              raise Exception(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            print(f"{profilename} Profile created")
          def add_managed_adc(adcip, agentip, adcpass, profilename, customer_id):
            print("INSIDE add_managed_adc()")
            # check for existing managed device
            url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/managed_device'
            status, reason, body = open_url(url, HEADERS)
            print(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            for managed_device in body['managed_device']:
              if managed_device['ip_address'] == adcip:
                print(f"{adcip} already exists")
                return status, reason, body
            MAX_RETRIES, tries = 30, 0
            agent = get_agent(agentip, customer_id)
            while agent is None and tries < MAX_RETRIES:
              agent = get_agent(agentip, customer_id)
              tries += 1
              print(f"Agent not found OR is still DOWN. Retrying in 10 seconds. Tries={tries}")
              time.sleep(10)
            dc_id = agent['datacenter_id']
            create_new_profile(profilename, 'nsroot', adcpass, customer_id)
            agent_id = agent['id']
            data =    {
              "params": { "action": "add_device" },
              "managed_device": {
                "register_failed_device": "true",
                "ip_address": adcip,
                "profile_name": profilename,
                "datacenter_id": dc_id,
                "agent_id": agent_id,
              }
            }
            url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/managed_device'
            status, reason, body = open_url(url, HEADERS, json.dumps(data), 'POST')
            print(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            return status, reason, body
          def wait_for_registration(body, customer_id):
            print("INSIDE wait_for_registration()")
            actid = body['managed_device'][0]['act_id']
            url = f'https://adm.cloud.com/massvc/{customer_id}/nitro/v2/config/activity_status/{actid}'
            status, reason, body = open_url(url, HEADERS)
            print(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            for activity_status in body["activity_status"]:
              if activity_status['is_last'] == 'true':
                if activity_status['status'] == 'Completed':
                  return True
                else:
                  raise Exception(f"Status={status}; Reason={reason}; Body={print_json(body)}")
            return False
          def handler(event, context):
            global HEADERS
            lambda_status = cfnresponse.SUCCESS
            lambda_reason = None
            resp = {}
            try:
              if event["RequestType"] == "Create":
                print("Request = Create")
                customer_id = event["ResourceProperties"]["CustomerID"]
                client_id = event["ResourceProperties"]["ClientID"]
                client_secret = event["ResourceProperties"]["ClientSecret"]
                adcip = event["ResourceProperties"]["ADCIP"]
                agentip = event["ResourceProperties"]["AgentIP"]
                adcpass = event["ResourceProperties"]["ADCPassword"]
                profilename = event["ResourceProperties"]["ProfileName"]
                print(f"agentip:{agentip}; adcip:{adcip}; profilename:{profilename}")
                status, reason, body = get_token(client_id, client_secret)
                if status != 200:
                  raise Exception(f"Status={status}; Reason={reason}; Body={print_json(body)}")
                HEADERS = { 'Authorization': f"CwsAuthbearer={body['access_token']}", 'isCloud': 'true'}
                profilename += ''.join(random.choice(string.ascii_uppercase + string.digits) for _ in range(3))
                status, reason, body = add_managed_adc(adcip, agentip,adcpass, profilename, customer_id)
                if status != 200:
                  raise Exception(f"Status={status}; Reason={reason}; Body={print_json(body)}")
                MAX_TRIES, tries = 20, 1
                while tries <= MAX_TRIES:
                  status = wait_for_registration(body, customer_id)
                  if not status:
                    tries += 1
                    print(f"ADC not registered yet. Retrying in 5 seconds. Tries={tries}")
                    time.sleep(5)
                  else:
                    print("ADC registered successfully. ")
                    break
                else:
                  raise Exception(f"Device not registered after {MAX_TRIES} tries")
            except Exception as e:
              print(f"Exception: {e}")
              lambda_status = cfnresponse.FAILED
              lambda_reason = str(e)
            finally:
              cfnresponse.send(event, context, lambda_status, responseData=resp, reason=lambda_reason)

  RegisterADCRole:
    Condition: RegisterADC2ADMService
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
        Version: "2012-10-17"
      Description: ""
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Path: /
      Policies: []
    Type: AWS::IAM::Role

  RegisterPrimaryADC:
    DependsOn: WaitForADCInstancesToBeReady
    Condition: RegisterADC2ADMService
    Properties:
      CustomerID: !Ref "CustomerID"
      ClientID: !Ref "ClientID"
      ClientSecret: !Ref "ClientSecret"
      ADCIP: !GetAtt "PrimaryManagementENI.PrimaryPrivateIpAddress"
      AgentIP:
        !If [
          DeployADMAgent,
          !GetAtt ADMAgentManagementENI.PrimaryPrivateIpAddress,
          !Ref ADMAgentIP,
        ]
      ADCPassword: !Ref ADCCustomPassword
      ProfileName: !Ref AWS::StackName
      ServiceToken: !GetAtt "RegisterADCFunction.Arn"
    Type: AWS::CloudFormation::CustomResource

  RegisterSecondaryADC:
    DependsOn: WaitForADCInstancesToBeReady
    Condition: RegisterADC2ADMService
    Properties:
      CustomerID: !Ref "CustomerID"
      ClientID: !Ref "ClientID"
      ClientSecret: !Ref "ClientSecret"
      ADCIP: !GetAtt "SecondaryManagementENI.PrimaryPrivateIpAddress"
      AgentIP:
        !If [
          DeployADMAgent,
          !GetAtt ADMAgentManagementENI.PrimaryPrivateIpAddress,
          !Ref ADMAgentIP,
        ]
      ADCPassword: !Ref ADCCustomPassword
      ProfileName: !Ref AWS::StackName
      ServiceToken: !GetAtt "RegisterADCFunction.Arn"
    Type: AWS::CloudFormation::CustomResource

  ADMAgentManagementSG:
    Condition: DeployADMAgent
    Properties:
      GroupName: !Sub "${AWS::StackName}-ADMAgentManagementSG"
      GroupDescription:
        Allow restricted inbound traffic from SSH and all traffic
        for required agent ports
      SecurityGroupEgress:
        - CidrIp: "0.0.0.0/0"
          Description: Allow all traffic to all destination
          IpProtocol: "-1"
      SecurityGroupIngress:
        - CidrIp: !Ref "RestrictedManagementCIDR"
          Description: SSH port
          IpProtocol: tcp
          FromPort: 22
          ToPort: 22
        - CidrIp: !Ref "VPCCIDR"
          Description: Allow all traffic within VPC
          IpProtocol: "-1"
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentUDP162
          IpProtocol: udp
          FromPort: 162
          ToPort: 162
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentUDP514
          IpProtocol: udp
          FromPort: 514
          ToPort: 514
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentTCP27000
          IpProtocol: tcp
          FromPort: 27000
          ToPort: 27000
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentTCP7279
          IpProtocol: tcp
          FromPort: 7279
          ToPort: 7279
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentUDP4739
          IpProtocol: udp
          FromPort: 4739
          ToPort: 4739
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentTCP5557
          IpProtocol: tcp
          FromPort: 5557
          ToPort: 5557
        - CidrIp: 0.0.0.0/0
          Description: SGIngresesAgentTCP5563
          IpProtocol: tcp
          FromPort: 5563
          ToPort: 5563
      VpcId: !Ref "VPCID"
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ADMAgentManagementSG"
    Type: AWS::EC2::SecurityGroup
  ADMAgentManagementENI:
    Condition: DeployADMAgent
    Properties:
      Description: CitrixADMAgent Management ENI
      GroupSet:
        - !Ref "ADMAgentManagementSG"
      PrivateIpAddress: !Ref "AWS::NoValue"
      SubnetId: !Ref PrimaryManagementPrivateSubnetID
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ADMAgentManagementENI"
    Type: AWS::EC2::NetworkInterface
  ADMAgentManagementEIP:
    Condition: DeployADMAgent
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ADMAgentManagementEIP"
    Type: AWS::EC2::EIP

  AssociateADMAgentManagementEIP2ENI:
    Condition: DeployADMAgent
    Properties:
      AllocationId: !GetAtt "ADMAgentManagementEIP.AllocationId"
      NetworkInterfaceId: !Ref "ADMAgentManagementENI"
      PrivateIpAddress: !GetAtt "ADMAgentManagementENI.PrimaryPrivateIpAddress"
    Type: AWS::EC2::EIPAssociation
  ADMAgentInstance:
    Condition: DeployADMAgent
    Properties:
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ADMAgentInstance"
      ImageId: !FindInMap
        - AWSAMIRegionMap
        - !Ref "AWS::Region"
        - ADMAGENT
      InstanceType: !Ref "ADMAgentInstanceType"
      KeyName: !Ref "KeyPairName"
      NetworkInterfaces:
        - DeviceIndex: "0"
          NetworkInterfaceId: !Ref "ADMAgentManagementENI"
      Tenancy: !Ref "VPCTenancy"
      UserData: !Base64
        Fn::Sub: registeragent -serviceurl ${ADMActivationCodeCustomResource.ServiceURL} -activationcode ${ADMActivationCodeCustomResource.ActivationCode}
    Type: AWS::EC2::Instance

  ADMActivationCodeIAMRole:
    Condition: DeployADMAgent
    Properties:
      Path: /
      Description: ""
      ManagedPolicyArns:
        - !Sub arn:${AWS::Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub lambda.${AWS::URLSuffix}
    Type: AWS::IAM::Role
  ADMActivationCodeFunction:
    Condition: DeployADMAgent
    Type: AWS::Lambda::Function
    Properties:
      Description: ADMActivationCodeFunction
      Handler: index.handler
      Role: !GetAtt "ADMActivationCodeIAMRole.Arn"
      Runtime: python3.6
      Timeout: 300
      Tags:
        - Key: Name
          Value: !Sub "${AWS::StackName}-ADMActivationCodeFunction"
      Code:
        ZipFile: |
          import cfnresponse
          import http.client
          import json
          def handler(event, context):
            status = cfnresponse.SUCCESS
            reason = None
            response_data = {}
            try:
              if event["RequestType"] == "Create":
                print("Request = Create")
                customer_id = event["ResourceProperties"]["CustomerID"]
                client_id = event["ResourceProperties"]["ClientID"]
                client_secret = event["ResourceProperties"]["ClientSecret"]
                conn = http.client.HTTPSConnection("adm.cloud.com")
                headers = { "isCloud": "true", "Content-Type": "application/json" }
                print(f"headers={headers}")
                payload = {"login": {"ID": client_id,"Secret": client_secret }}
                payload = json.dumps(payload)
                conn.request("POST", "/nitro/v1/config/login", payload, headers)
                print("Got SessionID")
                response = conn.getresponse()
                result = response.read()
                r = json.loads(result.decode("utf-8"))
                if 'errorcode' in r and r['errorcode'] != 0:
                  raise Exception(r)
                sessid = r["login"][0]["sessionid"]
                headers["Cookie"] = f"SESSID={sessid}"
                payload = ""
                conn.request("GET", f"/nitro/v1/config/trust_preauthtoken/{customer_id}?customer={customer_id}", payload, headers)
                response = conn.getresponse()
                result = response.read()
                r = json.loads(result.decode("utf-8"))
                if 'errorcode' in r and r['errorcode'] != 0:
                  raise Exception(r)
                print("Got Service URL and ActivationCode")
                service_url = r["trust_preauthtoken"][0]['api_gateway_url']
                activation_code = r["trust_preauthtoken"][0]['token']
                response_data = {
                  "ServiceURL": service_url,
                  "ActivationCode": activation_code
                }
            except Exception as e:
              reason = f"Exception: {e}"
              print(reason)
              status = cfnresponse.FAILED
            finally:
              cfnresponse.send(event, context, status, responseData=response_data, reason=reason)
  ADMActivationCodeCustomResource:
    Condition: DeployADMAgent
    Properties:
      ServiceToken: !GetAtt "ADMActivationCodeFunction.Arn"
      CustomerID: !Ref "CustomerID"
      ClientID: !Ref "ClientID"
      ClientSecret: !Ref "ClientSecret"
    Type: AWS::CloudFormation::CustomResource
