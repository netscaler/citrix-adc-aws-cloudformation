---
AWSTemplateFormatVersion: "2010-09-09"

Description: >-
  This CFT automates the steps required for the "Pre-requisites for AWS" for Autoscaling of Citrix ADC in AWS using Citrix ADM
  Refer the documentation https://docs.citrix.com/en-us/citrix-application-delivery-management-service/hybrid-multi-cloud-deployments/autoscale-for-aws/autoscale-for-aws-configuration.html#pre-requisites-for-aws

  Run this CFT only once. This creates IGW, Security Groups and IAM Roles
  This also creates AZ specific NAT, Route Tables and Subnets

Parameters:
  VPCID:
    Description: Select the target VPC from the Existing VPC
    Type: AWS::EC2::VPC::Id
  MgmtSubnetCIDR:
    Description: Give CIDR for management subnet within the VPC-CIDR
    Type: String
  PublicClientSubnetCIDR:
    Description: Give CIDR for Public-client subnet  within the VPC-CIDR
    Type: String
  ServerSubnetCIDR:
    Description: Give CIDR for Server subnet within the VPC-CIDR
    Type: String
  ExtID:
    Description: Optional External ID for IAM role being created for Citrix ADM
    Type: String
  Availabilityzone:
    Description: Specify the availabilty zone for zone dependent resources
    Type: AWS::EC2::AvailabilityZone::Name

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Network
        Parameters:
          - VPCID
          - Availabilityzone
      - Label:
          default: Subnet Configuration for the selected Availability Zone
        Parameters:
          - MgmtSubnetCIDR
          - PublicClientSubnetCIDR
          - ServerSubnetCIDR
      - Label:
          default: IAM Configuration
        Parameters:
          - ExtID
    ParameterLabels:
      VPCID:
        default: VPC ID
      MgmtSubnetCIDR:
        default: Management Subnet CIDR
      PublicClientSubnetCIDR:
        default: Client Subnet CIDR
      ServerSubnetCIDR:
        default: Server Subnet CIDR
      Availabilityzone:
        default: Availability Zone
      ExtID:
        default: External ID

Outputs:
  InternetGateWay:
    Description: Internet Gateway created
    Value: !Ref IGW
    Export:
      Name: !Sub ${AWS::StackName}-InternetGatewayID
  ManagementSecurityGroup:
    Description: Allows TCP-22,80,443,3008-3011,4001 & UDP-67,123,161,500,3003,4500,7000
    Value: !Ref sgManagement
  ClientSecurityGroup:
    Description: Allows TCP-22,80,443
    Value: !Ref sgClient
  ServerSecurityGroup:
    Description: Allows TCP-80
    Value: !Ref sgServer
  IAMRole:
    Description: IAM Role for Citrix ADM
    Value: !Ref ADMRole
  IAMRoleInstance:
    Description: IAM Role Instance for Citrix ADC
    Value: !Ref ADCRoleInstance
  NATGateway:
    Description: NAT Gateway for the selected Availability Zone
    Value: !Ref NAT
  RouteTableManagement:
    Description: Route Table associated with Management Subnet
    Value: !Ref MgmtRouteTable
  RouteTableClient:
    Description: Route Table associated with Client Subnet
    Value: !Ref PublicClientRouteTable


Resources:
  SubnetMgmt:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref MgmtSubnetCIDR
      AvailabilityZone: !Ref Availabilityzone
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub Mgmt-${AWS::StackName}
  SubnetClient:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref PublicClientSubnetCIDR
      AvailabilityZone: !Ref Availabilityzone
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub Public_Client-${AWS::StackName}
  SubnetServer:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: !Ref ServerSubnetCIDR
      AvailabilityZone: !Ref Availabilityzone
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub Server-${AWS::StackName}
  MgmtEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
  IGW:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub igw-${AWS::StackName}
  VpcGwAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPCID
      InternetGatewayId: !Ref IGW
    DependsOn: IGW
  NAT:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt MgmtEIP.AllocationId
      SubnetId: !Ref SubnetClient
      Tags:
        - Key: Name
          Value: !Sub nat-${AWS::StackName}
    DependsOn: VpcGwAttachment
  MgmtRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub rtbMgmt-${AWS::StackName}
  PublicClientRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPCID
      Tags:
        - Key: Name
          Value: !Sub rtbClient-${AWS::StackName}
  MgmtRtbAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref MgmtRouteTable
      SubnetId: !Ref SubnetMgmt
    DependsOn:
      - MgmtRouteTable
      - SubnetMgmt
  ClientRtbAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicClientRouteTable
      SubnetId: !Ref SubnetClient
    DependsOn:
      - PublicClientRouteTable
      - SubnetClient
  MgmtRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref MgmtRouteTable
      NatGatewayId: !Ref NAT
    DependsOn:
      - MgmtRtbAssociation
      - NAT
  ClientRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicClientRouteTable
      GatewayId: !Ref IGW
    DependsOn:
      - VpcGwAttachment
      - PublicClientRouteTable
  sgManagement:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for management subnet
      GroupName: !Sub sgMgmt-${AWS::StackName}
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: tcp
          FromPort: 3008
          ToPort: 3011
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: tcp
          FromPort: 4001
          ToPort: 4001
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 67
          ToPort: 67
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 123
          ToPort: 123
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 161
          ToPort: 161
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 500
          ToPort: 500
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 3003
          ToPort: 3003
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 4500
          ToPort: 4500
          CidrIp: !Ref MgmtSubnetCIDR
        - IpProtocol: udp
          FromPort: 7000
          ToPort: 7000
          CidrIp: !Ref MgmtSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub sgMgmt-${AWS::StackName}
  sgClient:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for public client subnet
      GroupName: !Sub sgClient-${AWS::StackName}
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref PublicClientSubnetCIDR
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicClientSubnetCIDR
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref PublicClientSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub sgClient-${AWS::StackName}
  sgServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for server subnet
      GroupName: !Sub sgServer-${AWS::StackName}
      VpcId: !Ref VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref PublicClientSubnetCIDR
      Tags:
        - Key: Name
          Value: !Sub sgServer-${AWS::StackName}
  ADMRole:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
        - PolicyName: !Sub citrixADMpolicy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - ec2:DescribeInstances
                  - ec2:UnmonitorInstances
                  - ec2:MonitorInstances
                  - ec2:CreateKeyPair
                  - ec2:ResetInstanceAttribute
                  - ec2:ReportInstanceStatus
                  - ec2:DescribeVolumeStatus
                  - ec2:StartInstances
                  - ec2:DescribeVolumes
                  - ec2:UnassignPrivateIpAddresses
                  - ec2:DescribeKeyPairs
                  - ec2:CreateTags
                  - ec2:ResetNetworkInterfaceAttribute
                  - ec2:ModifyNetworkInterfaceAttribute
                  - ec2:DeleteNetworkInterface
                  - ec2:RunInstances
                  - ec2:StopInstances
                  - ec2:AssignPrivateIpAddresses
                  - ec2:DescribeVolumeAttribute
                  - ec2:DescribeInstanceCreditSpecifications
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeImageAttribute
                  - ec2:AssociateAddress
                  - ec2:DescribeSubnets
                  - ec2:DeleteKeyPair
                  - ec2:DisassociateAddress
                  - ec2:DescribeAddresses
                  - ec2:DeleteTags
                  - ec2:RunScheduledInstances
                  - ec2:DescribeInstanceAttribute
                  - ec2:DescribeRegions
                  - ec2:DescribeDhcpOptions
                  - ec2:GetConsoleOutput
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DescribeAvailabilityZones
                  - ec2:DescribeNetworkInterfaceAttribute
                  - ec2:ModifyInstanceAttribute
                  - ec2:DescribeInstanceStatus
                  - ec2:ReleaseAddress
                  - ec2:RebootInstances
                  - ec2:TerminateInstances
                  - ec2:DetachNetworkInterface
                  - ec2:DescribeIamInstanceProfileAssociations
                  - ec2:DescribeTags
                  - ec2:AllocateAddress
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeHosts
                  - ec2:DescribeImages
                  - ec2:DescribeVpcs
                  - ec2:AttachNetworkInterface
                  - ec2:AssociateIamInstanceProfile
                Resource: "*"
              - Sid: VisualEditor1
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"
              - Sid: VisualEditor2
                Effect: Allow
                Action:
                  - route53:CreateHostedZone
                  - route53:CreateHealthCheck
                  - route53:GetHostedZone
                  - route53:ChangeResourceRecordSets
                  - route53:ChangeTagsForResource
                  - route53:DeleteHostedZone
                  - route53:DeleteHealthCheck
                  - route53:ListHostedZonesByName
                  - route53:GetHealthCheckCount
                Resource: "*"
              - Sid: VisualEditor3
                Effect: Allow
                Action:
                  - iam:ListInstanceProfiles
                  - iam:ListAttachedRolePolicies
                  - iam:SimulatePrincipalPolicy
                Resource: "*"
              - Sid: VisualEditor4
                Effect: Allow
                Action:
                  - ec2:ReleaseAddress
                  - elasticloadbalancing:DeleteLoadBalancer
                  - ec2:DescribeAddresses
                  - elasticloadbalancing:CreateListener
                  - elasticloadbalancing:CreateLoadBalancer
                  - elasticloadbalancing:RegisterTargets
                  - elasticloadbalancing:CreateTargetGroup
                  - elasticloadbalancing:DeregisterTargets
                  - ec2:DescribeSubnets
                  - elasticloadbalancing:DeleteTargetGroup
                  - elasticloadbalancing:ModifyTargetGroupAttributes
                  - ec2:AllocateAddress
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              AWS: !Sub arn:${AWS::Partition}:iam::417067727217:root
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                sts:ExternalId: !Ref ExtID
      RoleName: !Sub Citrix-ADM-${AWS::StackName}
  ADCRoleInstance:
    Type: AWS::IAM::Role
    Properties:
      Path: "/"
      Policies:
        - PolicyName: !Sub citrixADCpolicy-${AWS::StackName}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Sid: VisualEditor0
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:SimulatePrincipalPolicy
                  - autoscaling:*
                  - sns:*
                  - sqs:*
                  - cloudwatch:*
                  - ec2:AssignPrivateIpAddresses
                  - ec2:DescribeInstances
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DetachNetworkInterface
                  - ec2:AttachNetworkInterface
                  - ec2:StartInstances
                  - ec2:StopInstances
                Resource: "*"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Action:
              - sts:AssumeRole
            Effect: Allow
            Principal:
              Service:
                - !Sub ec2.${AWS::URLSuffix}
      RoleName: !Sub Citrix-ADC-${AWS::StackName}
  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: "/"
      Roles:
        - !Ref ADCRoleInstance
      InstanceProfileName: !Ref ADCRoleInstance
    DependsOn: ADCRoleInstance
